"use strict";(self.webpackChunkwebsitev_3=self.webpackChunkwebsitev_3||[]).push([[2830],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,c=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),p=s(n),m=i,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||l;return n?o.createElement(f,a(a({ref:t},u),{},{components:n})):o.createElement(f,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,a=new Array(l);a[0]=p;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:i,a[1]=r;for(var s=2;s<l;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},762:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return r},metadata:function(){return s},toc:function(){return d}});var o=n(7462),i=n(3366),l=(n(7294),n(3905)),a=["components"],r={id:"collections",title:"Collections",sidebar_label:"Collections",sidebar_position:4},c=void 0,s={unversionedId:"basics/collections",id:"version-2.x/basics/collections",title:"Collections",description:"Orionjs is made to work with MongoDB de default. To connect to MongoDB and execute queries you must create Collections.",source:"@site/versioned_docs/version-2.x/basics/collections.md",sourceDirName:"basics",slug:"/basics/collections",permalink:"/docs/2.x/basics/collections",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/basics/collections.md",tags:[],version:"2.x",sidebarPosition:4,frontMatter:{id:"collections",title:"Collections",sidebar_label:"Collections",sidebar_position:4},sidebar:"version-2.x/tutorialSidebar",previous:{title:"Resolvers",permalink:"/docs/2.x/basics/resolvers"},next:{title:"Jobs",permalink:"/docs/2.x/basics/jobs"}},u={},d=[{value:"The structure of the main collections of the application",id:"the-structure-of-the-main-collections-of-the-application",level:3},{value:"Create a collection",id:"create-a-collection",level:2},{value:"Methods",id:"methods",level:2},{value:"Find one",id:"find-one",level:3},{value:"Find",id:"find",level:3},{value:"Insert",id:"insert",level:3},{value:"Update",id:"update",level:3},{value:"Delete",id:"delete",level:3},{value:"Aggregate",id:"aggregate",level:3},{value:"Connecting to multiple databases",id:"connecting-to-multiple-databases",level:2},{value:"Using MongoDB node API",id:"using-mongodb-node-api",level:2}],p={toc:d};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,l.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Orionjs is made to work with MongoDB de default. To connect to MongoDB and execute queries you must create ",(0,l.kt)("inlineCode",{parentName:"p"},"Collections"),"."),(0,l.kt)("h3",{id:"the-structure-of-the-main-collections-of-the-application"},"The structure of the main collections of the application"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"server\n\u2514\u2500\u2500 app\n    \u2514\u2500\u2500 collections\n        \u2514\u2500\u2500 Collection1\n            \u2514\u2500\u2500 index.js\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"collections"),": The directory of the set of collections."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Collection1"),": Represents the collection use to manage its respective documents.")),(0,l.kt)("h2",{id:"create-a-collection"},"Create a collection"),(0,l.kt)("p",null,"By convention collections are created in the ",(0,l.kt)("inlineCode",{parentName:"p"},"app/collections")," folder, but you can create a collection anywhere."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import {Collection} from '@orion-js/app'\n\nconst MyCollection = new Collection({\n  name,\n  model,\n  indexes,\n  connection\n})\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name"),": The name of the collection in MongoDB."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"model"),": A model assigned to the collection. The schema of the model will be used to validate inserts and updates into the collection, and it will be initialized when using find methods."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"indexes"),": An array of indexes for this collection. Each item will be passed to the ",(0,l.kt)("inlineCode",{parentName:"li"},"collection.createIndex(keys, options)")," function from MongoDB.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"keys"),": An object containing the keys."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"options")," An object with the options of the index."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"connection"),": Specify another database connection (",(0,l.kt)("a",{parentName:"li",href:"#connecting-to-multiple-databases"},"see more"),").")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("p",null,"The Orionjs collection API is an abstraction of the Nodejs MongoDB Driver. It has the following methods:"),(0,l.kt)("h3",{id:"find-one"},"Find one"),(0,l.kt)("p",null,"Returns a document initializing it with the passed model."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const item = await collection.findOne(selector)\n")),(0,l.kt)("h3",{id:"find"},"Find"),(0,l.kt)("p",null,"Returns a MongoDB cursor."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const cursor = collection.find(selector)\ncursor.sort({date: -1})\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"toArray()")," function of the cursor will initialize all the items with the passed model."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const items = await collection.find(selector).toArray()\nconst count = await collection.find(selector).count()\n")),(0,l.kt)("h3",{id:"insert"},"Insert"),(0,l.kt)("p",null,"Inserts documents to the DB. Each document will be cleaned and verified using the passed model's schema. This function will return the ",(0,l.kt)("inlineCode",{parentName:"p"},"_id")," of the inserted item"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const docId = await collection.insertOne(document)\nconst docsIds = await collection.insertMany([document1, document2])\n")),(0,l.kt)("h3",{id:"update"},"Update"),(0,l.kt)("p",null,"Updates documents in the DB. The changes will be verified using the passed model's schema. The fields that are not changed will not be verified."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"await updateOne(selector, modifier)\nawait updateMany(selector, modifier)\n")),(0,l.kt)("h3",{id:"delete"},"Delete"),(0,l.kt)("p",null,"Deletes one or many documents."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"await deleteOne(selector)\nawait deleteMany(selector)\n")),(0,l.kt)("h3",{id:"aggregate"},"Aggregate"),(0,l.kt)("p",null,"Returns a MongoDB cursor using the MongoDB aggregate function. This will not initialize items when returning."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const result = await collection.aggregate(pipeline).toArray()\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"connecting-to-multiple-databases"},"Connecting to multiple databases"),(0,l.kt)("p",null,"You can specify another database connection when initializing a collection. To connect to other database call the ",(0,l.kt)("inlineCode",{parentName:"p"},"connectToDatabase")," function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import {connectToDatabase} from '@orion-js/app'\n\nconst mongoURL = process.env.OTHER_MONGO_URL\n\nexport default connectToDatabase(mongoURL)\n")),(0,l.kt)("p",null,"Then use the object returned by that function on the connection param for the collection."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import {Collection} from '@orion-js/app'\nimport User from 'app/models/User'\nimport otherDatabaseConnection from '../otherDatabaseConnection'\n\nexport default new Collection({\n  name: 'users',\n  model: User,\n  connection: otherDatabaseConnection\n})\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"using-mongodb-node-api"},"Using MongoDB node API"),(0,l.kt)("p",null,"If you need to use the native MongoDB collection api you can get it from the ",(0,l.kt)("inlineCode",{parentName:"p"},"rawCollection")," variable of the collection."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"")))}m.isMDXComponent=!0}}]);