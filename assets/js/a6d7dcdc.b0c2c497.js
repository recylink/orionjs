"use strict";(self.webpackChunkwebsitev_3=self.webpackChunkwebsitev_3||[]).push([[4786],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return c}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(a),c=i,h=m["".concat(s,".").concat(c)]||m[c]||d[c]||l;return a?n.createElement(h,r(r({ref:t},p),{},{components:a})):n.createElement(h,r({ref:t},p))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var u=2;u<l;u++)r[u]=a[u];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5691:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return d}});var n=a(7462),i=a(3366),l=(a(7294),a(3905)),r=["components"],o={id:"schema",title:"Schema",sidebar_label:"Schema",sidebar_position:1},s=void 0,u={unversionedId:"basics/schema",id:"version-2.x/basics/schema",title:"Schema",description:"Orionjs schema has two main purposes. First, it describes the structure of each Model, which will set",source:"@site/versioned_docs/version-2.x/basics/schema.md",sourceDirName:"basics",slug:"/basics/schema",permalink:"/docs/2.x/basics/schema",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/basics/schema.md",tags:[],version:"2.x",sidebarPosition:1,frontMatter:{id:"schema",title:"Schema",sidebar_label:"Schema",sidebar_position:1},sidebar:"version-2.x/tutorialSidebar",previous:{title:"Database",permalink:"/docs/2.x/getting-started/database"},next:{title:"Models",permalink:"/docs/2.x/basics/models"}},p={},d=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Example",id:"example",level:4},{value:"Schema rules",id:"schema-rules",level:2},{value:"Type",id:"type",level:3},{value:"Label",id:"label",level:3},{value:"description",id:"description",level:3},{value:"optional",id:"optional",level:3},{value:"private",id:"private",level:3},{value:"min/max",id:"minmax",level:3},{value:"allowedValues",id:"allowedvalues",level:3},{value:"defaultValue",id:"defaultvalue",level:3},{value:"validate",id:"validate",level:2},{value:"clean",id:"clean",level:2}],m={toc:d};function c(e){var t=e.components,a=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Orionjs schema has two main purposes. First, it describes the structure of each Model, which will set\nautomatically the GraphQL schema for that Model. Second, if you specify a Model in the setup of\na Collection, it will validate the structure of a document before it's get inserted or updated into the MongoDB.\nYou can also use the ",(0,l.kt)("a",{parentName:"p",href:"https://orionjs.com/docs/models#validate-and-clean"},(0,l.kt)("inlineCode",{parentName:"a"},"validate"))," Model function which will throw a ",(0,l.kt)("inlineCode",{parentName:"p"},"ValidationError")," if the object doesn't\nfit the given schema. It's important to note that ",(0,l.kt)("inlineCode",{parentName:"p"},"validate")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"async"),"."),(0,l.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,l.kt)("p",null,"In Orionjs schemas are defined as a plain object with an specific structure."),(0,l.kt)("h4",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import {validate} from '@orion-js/schema'\n\nconst bookSchema = {\n  title: {\n    type: String,\n    label: 'Name'\n  },\n  author: {\n    type: String,\n    label: 'Author'\n  },\n  releaseDate: {\n    type: Date,\n    label: 'Release Date',\n    optional: true\n  }\n}\n\n// The following will pass\nawait validate(bookSchema, {title: 'The Book', author: 'The author'})\nawait validate(bookSchema, {title: 'The Book', author: 'The author', releaseDate: new Date()})\n\n// The following will throw a ValidationError\nawait validate(bookSchema, {title: 'The Book'}) // The author is missing\nawait validate(bookSchema, {title: 'The Book', author: 'The author', releaseDate: 3}) // releaseDate should be type date\n")),(0,l.kt)("h2",{id:"schema-rules"},"Schema rules"),(0,l.kt)("p",null,"There are several options available, the only required is ",(0,l.kt)("inlineCode",{parentName:"p"},"type"),"."),(0,l.kt)("p",null,"The options available are:"),(0,l.kt)("h3",{id:"type"},"Type"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," property has the following options:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"String")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"'string'"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Number")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"'number'"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Date")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"'date'"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Boolean")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"'boolean'"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"'ID'")," allows you to save an id, which could be a string or an integer."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"'email'")," checks if the email inserted has a valid format."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"'integer'")," allows you to save integers."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"'blackbox'")," allows you to save any object."),(0,l.kt)("li",{parentName:"ul"},"Custom, you can set as a type any Model.")),(0,l.kt)("p",null,"All the types can be used as array, for example if you want an array of ",(0,l.kt)("inlineCode",{parentName:"p"},"String")," you should use\n",(0,l.kt)("inlineCode",{parentName:"p"},"[String]"),"."),(0,l.kt)("h3",{id:"label"},"Label"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"label")," should be a ",(0,l.kt)("inlineCode",{parentName:"p"},"String"),". It's used by ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/orionjs/orionjs-react-autoform",title:"orionjs-react-autoform"},"orionjs-react-autoform"),"."),(0,l.kt)("h3",{id:"description"},"description"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"description")," should be a ",(0,l.kt)("inlineCode",{parentName:"p"},"String"),". It will be the description for GraphQL and it's used by ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/orionjs/orionjs-react-autoform",title:"orionjs-react-autoform"},"orionjs-react-autoform"),"\n."),(0,l.kt)("h3",{id:"optional"},"optional"),(0,l.kt)("p",null,"By default, all keys are required. Set ",(0,l.kt)("inlineCode",{parentName:"p"},"optional: true")," to make a field optional."),(0,l.kt)("h3",{id:"private"},"private"),(0,l.kt)("p",null,"This attribute cannot be queried from the API, not exposed in Graphql."),(0,l.kt)("p",null,"By default, all keys are not private. Set ",(0,l.kt)("inlineCode",{parentName:"p"},"private: true")," to make a field private."),(0,l.kt)("h3",{id:"minmax"},"min/max"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"type")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"Number")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"'integer'"),", these rules define the minimum and maximum numeric value."),(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"type")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"String"),", these rules define the minimum or maximum string length."),(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"type")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"Date"),", these rules define the minimum or maximum date.")),(0,l.kt)("h3",{id:"allowedvalues"},"allowedValues"),(0,l.kt)("p",null,"Should be an array of values."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"type")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"Number"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"String"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"Date")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"'integer'")," it will allow only values specified in\nthis field."),(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"type")," is an array of any type, it will accept only values specified in this field.")),(0,l.kt)("h3",{id:"defaultvalue"},"defaultValue"),(0,l.kt)("p",null,"Defines the default value for the field if nothing was given."),(0,l.kt)("h2",{id:"validate"},"validate"),(0,l.kt)("p",null,"This receives a function - which could be ",(0,l.kt)("inlineCode",{parentName:"p"},"async")," - with the following arguments:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fieldValue"),": It's the value for the given field."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"options"),": An object with the following keys:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"schema"),": The full schema you are validating against."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"currentSchema"),": The subpart of the schema you are validating."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"doc"),": The full object you are validating."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"currentDoc"),": The subpart of the object you are validating.")))),(0,l.kt)("p",null,"With this function you can make a custom validation of the value, it should return the error message\nif any and nothing if it has been successfully validated"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example, we will make a custom email validation without the use of the type ",(0,l.kt)("inlineCode",{parentName:"strong"},"email"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const schema = {\n  email: {\n    type: String,\n    validate(fieldValue) {\n      // Regex to test if an email is valid\n      const regex =\n        /^(([^<>()\\[\\]\\\\.,;:\\s@"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@"]+)*)|(".+"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\n      if (!regex.test(fieldValue)) return \'notAnEmail\'\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"clean"},"clean"),(0,l.kt)("p",null,"This receives a function - which could be ",(0,l.kt)("inlineCode",{parentName:"p"},"async")," - with the following arguments:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fieldValue"),": It's the value for the given field."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"options"),": An object with the following keys:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"doc"),": The full object you are validating."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"currentDoc"),": The subpart of the object you are validating.")))),(0,l.kt)("p",null,"With this function you can make a custom clean of the value, it should return the new value for this\nfield"))}c.isMDXComponent=!0}}]);