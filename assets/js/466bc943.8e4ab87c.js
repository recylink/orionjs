"use strict";(self.webpackChunkwebsitev_3=self.webpackChunkwebsitev_3||[]).push([[4036],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(n),d=o,f=u["".concat(s,".").concat(d)]||u[d]||c[d]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var m=2;m<a;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4042:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return c}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={id:"autoform",title:"Autoform",sidebar_label:"Autoform",sidebar_position:6},s=void 0,m={unversionedId:"modules/autoform",id:"version-2.x/modules/autoform",title:"Autoform",description:"Autoform is an Orionjs package, available to import in any React project and usable as a React Component. It allows to specify the name of a mutation as a prop and automatically setting a form for it, allowing faster developing.",source:"@site/versioned_docs/version-2.x/modules/autoform.md",sourceDirName:"modules",slug:"/modules/autoform",permalink:"/docs/2.x/modules/autoform",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/modules/autoform.md",tags:[],version:"2.x",sidebarPosition:6,frontMatter:{id:"autoform",title:"Autoform",sidebar_label:"Autoform",sidebar_position:6},sidebar:"version-2.x/tutorialSidebar",previous:{title:"Mailing",permalink:"/docs/2.x/modules/mailing"},next:{title:"Echoes",permalink:"/docs/2.x/modules/echoes"}},p={},c=[{value:"Background",id:"background",level:2},{value:"Usage",id:"usage",level:2},{value:"Client-side",id:"client-side",level:3},{value:"Server-side",id:"server-side",level:3}],u={toc:c};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/orionjs/orionjs-react-autoform"},"Autoform")," is an Orionjs package, available to import in any React project and usable as a React Component. It allows to specify the name of a ",(0,a.kt)("inlineCode",{parentName:"p"},"mutation")," as a prop and automatically setting a form for it, allowing faster developing."),(0,a.kt)("h2",{id:"background"},"Background"),(0,a.kt)("p",null,"The client side provided by the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/orionjs/boilerplate-graphql-fullstack"},"Orionjs Full-stack Boilerplate")," has this structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"web\n\u2514\u2500\u2500 App\n    \u251c\u2500\u2500 Pages\n    \u251c\u2500\u2500 Root\n    \u251c\u2500\u2500 components\n    \u2502   \u251c\u2500\u2500 AutoForm\n    \u2502   \u2514\u2500\u2500 fields\n    \u251c\u2500\u2500 helpers\n    \u251c\u2500\u2500 i18n\n    \u2514\u2500\u2500 index.js\n")),(0,a.kt)("p",null,"By default, the ",(0,a.kt)("inlineCode",{parentName:"p"},"components")," folder will have a folder called ",(0,a.kt)("inlineCode",{parentName:"p"},"AutoForm")," containing a ",(0,a.kt)("inlineCode",{parentName:"p"},"index.js")," with the next structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import createAutoform from 'orionjs-react-autoform'\nimport fields from '../fields'\nimport translate from 'App/i18n/translate'\n\nconst Autoform = createAutoform({\n  fields,\n  onError: error => alert(error.message),\n  getErrorText: (code, field) => {\n    return translate(`errors.${code}`, field)\n  }\n})\n\nexport default Autoform\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"createAutoform")," : Returns the ",(0,a.kt)("inlineCode",{parentName:"li"},"Autoform")," component."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fields")," : Object that allows Autoform to distinguish the fields of the schema specified in the mutation resolver (see ",(0,a.kt)("a",{parentName:"li",href:"https://orionjs.com/docs/resolvers#mutation-resolver"},(0,a.kt)("inlineCode",{parentName:"a"},"Mutation Resolvers")),")")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("h3",{id:"client-side"},"Client-side"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Autoform")," can be called as a React Component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react'\nimport PropTypes from 'prop-types'\nimport Button from 'orionsoft-parts/lib/components/Button'\nimport AutoForm from 'App/components/AutoForm'\n\nexport default class Create extends React.Component {\n  static propTypes = {}\n\n  success() {\n    alert('Success')\n  }\n\n  render() {\n    const genre = 'terror'\n    return (\n      <div>\n        <AutoForm\n          mutation=\"insertMovie\"\n          ref=\"form\"\n          doc={{genre}}\n          onSuccess={() => this.success()}\n        />\n        <br />\n        <Button onClick={() => this.refs.form.submit()}>Register Movie</Button>\n      </div>\n    )\n  }\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mutation"),": Name of the mutation."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ref"),": Reference of the Autoform inside the component. In this case, is used by the Button component."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"doc"),": Object that sets the initial ",(0,a.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/state-and-lifecycle.html"},(0,a.kt)("inlineCode",{parentName:"a"},"state"))," of the Form. The form works with an internal state, which will be the data that will be send to the mutation as parameters."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"onSuccess"),": Action triggered after completed the mutation.")),(0,a.kt)("p",null,"This will show in the component the corresponding fields from the mutation schema. The field for ",(0,a.kt)("inlineCode",{parentName:"p"},"genre")," will have ",(0,a.kt)("inlineCode",{parentName:"p"},"terror")," as variable value."),(0,a.kt)("p",null,"An alternative usage implies declaring the fields manually as children of the Autoform component using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Field")," component from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nicolaslopezj/simple-react-form"},(0,a.kt)("inlineCode",{parentName:"a"},"simple-react-form")),". This is recommended when a specific behavior for a field is required:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react'\nimport PropTypes from 'prop-types'\nimport Button from 'orionsoft-parts/lib/components/Button'\nimport AutoForm from 'App/components/AutoForm'\nimport {Field} from 'simple-react-form'\nimport Text from 'orionsoft-parts/lib/components/fields/Text'\n\nexport default class Create extends React.Component {\n  static propTypes = {}\n\n  success() {\n    alert('Success')\n  }\n\n  render() {\n    const genre = 'terror'\n    return (\n      <div>\n        <AutoForm mutation=\"insertMovie\" ref=\"form\" doc={{genre}} onSuccess={() => this.success()}>\n          <div className=\"label\">Name:</div>\n          <Field fieldName=\"name\" type={Text} />\n          <div className=\"label\">Genre:</div>\n          <Field fieldName=\"genre\" type={Text} />\n          <div className=\"label\">Insert an optional description:</div>\n          <Field fieldName=\"description\" type={Text} />\n        </AutoForm>\n        <br />\n        <Button onClick={() => this.refs.form.submit()}>Register Movie</Button>\n      </div>\n    )\n  }\n}\n")),(0,a.kt)("p",null,"Other props that Autoform can use are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"schema"),": It allows to specify a schema directly from an object in the React Component."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"clean"),": By default, ",(0,a.kt)("inlineCode",{parentName:"li"},"Autoform")," uses the ",(0,a.kt)("a",{parentName:"li",href:"https://orionjs.com/docs/models#validate-and-clean"},(0,a.kt)("inlineCode",{parentName:"a"},"clean"))," method from Orionjs, but it can receive a custom ",(0,a.kt)("inlineCode",{parentName:"li"},"clean")," method."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"validate"),": By default, ",(0,a.kt)("inlineCode",{parentName:"li"},"Autoform")," uses the ",(0,a.kt)("a",{parentName:"li",href:"https://orionjs.com/docs/models#validate-and-validate"},(0,a.kt)("inlineCode",{parentName:"a"},"validate"))," method from Orionjs, but it can receive a custom ",(0,a.kt)("inlineCode",{parentName:"li"},"validate")," method."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"omit"),": It receives an array containing the names of the elements in the schema you don't want to render as fields."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"only"),": It receives an array containing only the names of the elements in the schema you want to render."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fragment"),": Only use this property when using the Autoform component inside a ",(0,a.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/fragments.html"},(0,a.kt)("inlineCode",{parentName:"a"},"React.Fragment")),".")),(0,a.kt)("h3",{id:"server-side"},"Server-side"),(0,a.kt)("p",null,"For this example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"insertMovie")," mutation should already be declared in the ",(0,a.kt)("inlineCode",{parentName:"p"},"index.js")," file in the root of the ",(0,a.kt)("inlineCode",{parentName:"p"},"resolvers")," folder, and have this structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {resolver} from '@orion-js/app'\nimport Movies from 'app/collections/Movies'\nimport Movie from 'app/models/Movie'\n\nexport default resolver({\n  params: {\n    name: {\n      type: String\n    },\n    genre: {\n      type: String\n    },\n    description: {\n      type: String,\n      optional: true\n    }\n  },\n  returns: Boolean,\n  mutation: true,\n  async resolve({name, genre, description}, viewer) {\n    const movie = await Movies.insertOne({name, genre, description})\n    return true\n  }\n})\n")),(0,a.kt)("p",null,"By using the schema in the ",(0,a.kt)("inlineCode",{parentName:"p"},"params")," object, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Autoform")," component will show 3 input fields: ",(0,a.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"genre"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"description"),"."))}d.isMDXComponent=!0}}]);