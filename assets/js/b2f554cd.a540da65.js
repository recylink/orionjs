"use strict";(self.webpackChunkwebsitev_3=self.webpackChunkwebsitev_3||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"/2018/08/23/hello-world","metadata":{"permalink":"/blog/2018/08/23/hello-world","editUrl":"https://github.com/facebook/docusaurus/edit/main/website/blog/blog/2018-08-23-hello-world.md","source":"@site/blog/2018-08-23-hello-world.md","title":"Hello World","description":"Goodbye Meteor, hello Orionjs.","date":"2018-08-23T00:00:00.000Z","formattedDate":"August 23, 2018","tags":[],"readingTime":1.74,"truncated":true,"authors":[{"name":"Nicol\xe1s L\xf3pez","url":"https://github.com/nicolaslopezj","image_url":"https://avatars.githubusercontent.com/u/2042567?v=4","tags":["orionjs","meteor"],"imageURL":"https://avatars.githubusercontent.com/u/2042567?v=4"}],"frontMatter":{"title":"Hello World","authors":{"name":"Nicol\xe1s L\xf3pez","url":"https://github.com/nicolaslopezj","image_url":"https://avatars.githubusercontent.com/u/2042567?v=4","tags":["orionjs","meteor"],"imageURL":"https://avatars.githubusercontent.com/u/2042567?v=4"}}},"content":"## Goodbye Meteor, hello Orionjs.\\n\\nWhen I first used Meteor, I was amazed. It was so fast to write, so easy, it\\nfelt like magic. But after some years, the apps I was creating required more\\ncomplexity, the code base started to get bigger and everything became slow and\\nbuggy. Then I started to use apollo, without leaving Meteor, but it felt like\\nusing the wrong tool for the job.\\n\\n\x3c!--truncate--\x3e\\n\\nThe desition to start a new framework is not easy, you must commit for a long\\ntime, but I didn\'t found what I was looking for anywhere. So I decided to create\\nOrionjs.\\n\\nWhen designing how it will work, how the structure will be, and also thinking\\nwhat was what Meteor did wrong I ended up with the following points.\\n\\n### Write as little as possible\\n\\nThe most important thing in Orionjs is that you can achieve big thing with very\\nlittle code, everything is made to be reused. This makes apps less complex and\\nfail less.\\n\\nOrionjs automatically handles the GraphQL schema creation, validation,\\nauthentication and many more things that make you write code really fast.\\n\\n### Simple to use and learn\\n\\nOrionjs must always keep simple. All complex things like subscriptions (using\\nGraphQL subscriptions), authentication (singing every request and with man in\\nthe middle protection) and connection with the server (apollo configuration) are\\nhandled for you and presented in an easy way.\\n\\n### Don\'t do it all\\n\\nWhen Meteor was created there was no consensus on a package system for Node, so\\nthey created their own. Add to that, managing the build system, create the\\ncommunication layer between client and server, and all that pieces of code that\\nmake Meteor a big layer over Node. It feels like another ecosystem. I think if\\nMeteor was created today it would try to do all that things.\\n\\nThat\'s why Orionjs does only what it\'s not already done. It uses babel, Apollo,\\nmicro, MongoDB, and more.\\n\\n---\\n\\nI had great time writing with Meteor, but now, six years after it was created,\\nit\'s time to turn the page."}]}')}}]);