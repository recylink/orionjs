"use strict";(self.webpackChunkwebsitev_3=self.webpackChunkwebsitev_3||[]).push([[5069],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=d(n),p=r,h=m["".concat(s,".").concat(p)]||m[p]||u[p]||l;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var d=2;d<l;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8215:function(e,t,n){n.d(t,{Z:function(){return r}});var a=n(7294);function r(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return c}});var a=n(7462),r=n(7294),l=n(2389),o=n(5979),i=n(6010),s="tabItem_LplD";function d(e){var t,n,l,d=e.lazy,c=e.block,u=e.defaultValue,m=e.values,p=e.groupId,h=e.className,f=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=m?m:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),k=(0,o.lx)(v,(function(e,t){return e.value===t.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===u?u:null!=(t=null!=u?u:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(l=f[0])?void 0:l.props.value;if(null!==b&&!v.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,o.UB)(),N=y.tabGroupChoices,g=y.setTabGroupChoices,w=(0,r.useState)(b),x=w[0],M=w[1],C=[],T=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=p){var O=N[p];null!=O&&O!==x&&v.some((function(e){return e.value===O}))&&M(O)}var j=function(e){var t=e.currentTarget,n=C.indexOf(t),a=v[n].value;a!==x&&(T(t),M(a),null!=p&&g(p,a))},E=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=C.indexOf(e.currentTarget)+1;n=C[a]||C[0];break;case"ArrowLeft":var r=C.indexOf(e.currentTarget)-1;n=C[r]||C[C.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":c},h)},v.map((function(e){var t=e.value,n=e.label,l=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:function(e){return C.push(e)},onKeyDown:E,onFocus:j,onClick:j},l,{className:(0,i.Z)("tabs__item",s,null==l?void 0:l.className,{"tabs__item--active":x===t})}),null!=n?n:t)}))),d?(0,r.cloneElement)(f.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function c(e){var t=(0,l.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},4621:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return d},metadata:function(){return u},toc:function(){return p}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),o=n(9877),i=n(8215),s=["components"],d={id:"models",title:"Models",sidebar_label:"Models",sidebar_position:2},c=void 0,u={unversionedId:"basics/models",id:"basics/models",title:"Models",description:"The models in Orionjs define the structure of a collection which are its variables and types. It validates that the data entering or leaving the collection is coherent with the defined structure in the schema.",source:"@site/docs/basics/models.md",sourceDirName:"basics",slug:"/basics/models",permalink:"/docs/basics/models",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/basics/models.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"models",title:"Models",sidebar_label:"Models",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Schema",permalink:"/docs/basics/schema"},next:{title:"Resolvers",permalink:"/docs/basics/resolvers"}},m={},p=[{value:"Proposed folder structure",id:"proposed-folder-structure",level:2},{value:"Create a model",id:"create-a-model",level:2},{value:"Create a Model with Decorators",id:"create-a-model-with-decorators",level:2},{value:"Decorators",id:"decorators",level:3},{value:"Clone a Model",id:"clone-a-model",level:2},{value:"Clone model example",id:"clone-model-example",level:4},{value:"Init item",id:"init-item",level:2},{value:"Validate and clean",id:"validate-and-clean",level:2},{value:"Examples",id:"examples",level:4}],h={toc:p};function f(e){var t=e.components,n=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The models in Orionjs define the structure of a collection which are its variables and types. It validates that the data entering or leaving the collection is coherent with the defined structure in the schema."),(0,l.kt)("p",null,"When creating a model, you can use two ways: ",(0,l.kt)("strong",{parentName:"p"},"with")," or ",(0,l.kt)("strong",{parentName:"p"},"without")," decorators."),(0,l.kt)("h1",{id:"install-package"},"Install Package"),(0,l.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @orion-js/models\n"))),(0,l.kt)(i.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @orion-js/models\n")))),(0,l.kt)("h2",{id:"proposed-folder-structure"},"Proposed folder structure"),(0,l.kt)("p",null,"By convention the models are created in the ",(0,l.kt)("inlineCode",{parentName:"p"},"app/models")," folder, but you can create a model anywhere."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"app\n\u2514\u2500\u2500 models\n    \u2514\u2500\u2500 MyModel\n        \u251c\u2500\u2500 schema.ts\n        \u251c\u2500\u2500 resolvers\n        \u2502   \u251c\u2500\u2500 resolver1\n        \u2502   \u2502   \u2514\u2500\u2500 index.ts\n        \u2502   \u2514\u2500\u2500 index.ts\n        \u2514\u2500\u2500 index.ts\n")),(0,l.kt)("h2",{id:"create-a-model"},"Create a model"),(0,l.kt)("p",null,"Here is an example of the ",(0,l.kt)("inlineCode",{parentName:"p"},"index.ts")," file of a Model."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="app/models/MyModel/index.ts"',title:'"app/models/MyModel/index.ts"'},"import {createModel} from '@orion-js/models'\n\nexport default createModel({\n  name: 'MyModel',\n  schema: () => require('./schema'),\n  resolvers: () => require('./resolvers')\n})\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name"),": The name of the model."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"schema"),": Describes the structure of each model. The complete documentation of the schemas is in ",(0,l.kt)("a",{parentName:"li",href:"../basics/schema"},"Orionjs Schemas"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"resolvers"),": The resolvers of the models are controllers or specific functions to obtain data that are not directly in the database. You can use the current information in the database of a collection to create an custom output data. See more in ",(0,l.kt)("a",{parentName:"li",href:"../basics/resolvers"},"Orionjs Resolvers"),".")),(0,l.kt)("h2",{id:"create-a-model-with-decorators"},"Create a Model with Decorators"),(0,l.kt)("p",null,"Here is an example of the ",(0,l.kt)("inlineCode",{parentName:"p"},"index.ts")," file of a Model using Decorators."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="app/models/MyModel/index.ts"',title:'"app/models/MyModel/index.ts"'},"import {Prop, TypedModel, ResolverProp} from '@orion-js/typed-model'\nimport prettyText from './prettyText'\n\n@TypedModel()\nexport class MyModel {\n  /**\n   * The name of the counter\n   */\n  @Prop()\n  name: string\n\n  /**\n   * The current value of the counter\n   */\n  @Prop()\n  counter: number\n\n  /**\n   * A texts returning the counter and the name\n   */\n  @ResolverProp(prettyText)\n  prettyText: typeof prettyText.modelResolve\n}\n")),(0,l.kt)("h3",{id:"decorators"},"Decorators"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@TypedModel()"),": Specifies that what follows will be a Model."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@Prop()"),": Specifies that what follows will be a property of the Model."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"@ResolverProp()"),": .")),(0,l.kt)("h2",{id:"clone-a-model"},"Clone a Model"),(0,l.kt)("p",null,"Sometimes you need a copy of your model with some changes. For example when creating a update resolver, you want to create a new model that has all the model fields except ",(0,l.kt)("inlineCode",{parentName:"p"},"_id")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"createdAt"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"Model.clone({\n  name,\n  omitFields,\n  pickFields,\n  mapFields,\n  extendSchema,\n  extendResolvers\n})\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name"),": The new name of the model."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"omitFields"),": Optional. An array of the schema fields you want to omit in the new model."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pickFields"),": Optional. An array of the schema fields you want to pass to the new model. You may use ",(0,l.kt)("inlineCode",{parentName:"li"},"omitFields")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"pickFields"),", but not both at the same time."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mapFields"),": Optional. A function that receives a field of the schema and returns a replacement for that field."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"extendSchema"),": Optional. Add fields to the cloned model."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"extendResolvers"),": Optional. Add resolvers to the cloned model.")),(0,l.kt)("h4",{id:"clone-model-example"},"Clone model example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"Model.clone({\n  name: 'ModelClone',\n  omitFields: ['_id, last4'],\n  mapFields(field, key) {\n    field.optional = true\n    return field\n  }\n})\n")),(0,l.kt)("h2",{id:"init-item"},"Init item"),(0,l.kt)("p",null,"Orionjs initializes items automatically when they come from the database, but if your data is not from a collection and you want to access resolvers, you need to initialize the item with the function ",(0,l.kt)("inlineCode",{parentName:"p"},"Model.initItem(data)")),(0,l.kt)("h2",{id:"validate-and-clean"},"Validate and clean"),(0,l.kt)("p",null,"The model exposes method to validate items directly against it's schema. ",(0,l.kt)("inlineCode",{parentName:"p"},"Model.validate(data)")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Model.clean(data)"),"."),(0,l.kt)("h4",{id:"examples"},"Examples"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Model.validate(data)")," can be use to check the legitimacy of an object according to the schema"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import Model1 from 'app/models/Model1'\n\ntry {\n  await Model1.validate(data)\n} catch (error) {\n  return 'missing Option'\n}\n")),(0,l.kt)("p",null,"On the other side, ",(0,l.kt)("inlineCode",{parentName:"p"},"Model1.clean(data)")," removes all information from ",(0,l.kt)("inlineCode",{parentName:"p"},"data")," inconsistent with the schema."))}f.isMDXComponent=!0}}]);